(sorted-map 3 ["Kyle"] 4 ["Christopher" "Jennifer"] 6 ["Kareem"])
(sorted-map 3 ["Kyle"] 4 ["Justin" "Christopher"] 6 ["Kareem"])
(def sample (sorted-map 3 ["Kyle"] 4 ["Justin" "Christopher"] 6 ["Kareem"]))
sample
(into (sorted-map) (for [k (keys sample) vs (get sample k)] [k (sort vs)]))
(into (sorted-map) (for [k (keys sample) vs (k sample)] [k (sort vs)]))
(into (sorted-map) (for [k (keys sample) vs (sample k)] [k (sort vs)]))
(into (sorted-map) (for [k (keys sample) vs (sample k)] [k (apply sort vs)]))
(into (sorted-map) (for [k (keys sample) vs (sample k)] [k vs]))
(into (sorted-map) (for [k (keys sample) vs (vals sample)] [k vs]))
(into (sorted-map) (for [k (keys sample) vs (vals (sample k))] [k vs]))
(into (sorted-map) (for [k (keys sample) vs sample] [k vs]))
(into (sorted-map) (for [k (keys sample)] [k]))
(into (sorted-map) (for [k (keys sample)] [k (sort (sample k))]))
(into (sorted-map) (for [k (keys sample)] [k (sort (into [] (sample k)))]))
(into (sorted-map) (for [k (keys sample)] [k (into [] (sort sample k))]))
(into (sorted-map) (for [k (keys sample)] [k (into [] (sort sample k))])))
(into (sorted-map) (for [k (keys sample)] [k (into [] (sort sample k))]))
(into (sorted-map) (for [k (keys sample)] [k (sort sample k)]))
(into (sorted-map) (for [k (keys sample)] [k (sort (sample k))]))
(into (sorted-map) (for [k (keys sample)] [k (vec (sort (sample k)))]))
(def sample (sorted-map 3 ["Kyle"] 4 ["Justin" "Christopher"] 6 ["Kareem"]))
(map #([%1 %2]) sample)
(map #(%) sample)
(map identity sample)
(map #((first %) (sort (second %))) sample)
(map #((first %) (second %)) sample)
(map str sample)
(map (partial apply str) sample)
(map #(%) sample)
(map (fn[[k v]] [k (into [] (sort v))]) sample)
(into (sorted-map) (map (fn[[k v]] [k (into [] (sort v))]) sample))
