(def sides 3 2 5)
(def sides (3 2 5))
(def sides '(3 2 5))
sides
(partition (repeat sides) 2)
(partition 2 (repeat sides))
(def sides '(3 4 5))
(take 3 (partition 2 (repeat sides)))
(for [x sides y sides] '(x y))
(for [x sides y sides] (list x y))
(for [x sides y sides] [x y])
(use '[clojure.math.combinatorics :as c])
(c/combinations sides 2)
(def sides '(3 4 5))
(c/combinations sides 2)
(apply < (c/combinations sides 2))
(map #(< %1 %2) (c/combinations sides 2))
(apply#(< %1 %2) (c/combinations sides 2))
(apply #(< %1 %2) (c/combinations sides 2))
(c/combinations sides 2)
(apply < '(3 4))
(map (partial apply <) (c/combinations sides 2))
(reduce and (partial apply <) (c/combinations sides 2))
(every? identity (partial apply <) (c/combinations sides 2)))
(every? identity (partial apply <) (c/combinations sides 2))
(every? identity (map (partial apply <) (c/combinations sides 2)))
(use triangle)
(use 'triangle)
(triangle/type 1 2 1)
(use 'triangle)
(triangle/type 1 2 1)
(use 'triangle)
(triangle/type 1 2 1)
(triangle/type 3 4 5)
(triangle/type 4 4 5)
(def sides [1 1 2])
(sort sides)
(let [[a b c] (sort sides)]
  (< (+ a b) c))
(every #(> % 0) '(1 2 3))
(every? #(> % 0) '(1 2 3))
(every? #(> % 0) '(0 2 3))
(= 10 10 10)
(= 1 1 2)
exit()
