(map {"A" "B" "E" "R"} "AAAEE")
(def transcribe {"G" "C" "C" "G" "T" "A" "A" "U"})
transcribe 
(transcribe "A")
(transcribe "AA")
(map transcribe "AA")
(map transcribe (seq "AA"))
(map #(transcribe %) "AA")
(map #(transcribe %) (seq "AA"))
(map identity "AA")
(def transcribe { \G \C \C \G \T \A \A \U })
(map transcribe "AA")
(apply str (map transcribe "AACTGCC"))
(contains? "ACDA" #{\A \C})
(contains? (set "ACDA") #{\A \C})
(set "ACDA")
(contains? (set "ACDA") #{\A \C \D \E})
(subset? (set "ACDA") #{\A \C \D \E})
(use '[clojure.set :as set])
(set/subset? (set "ACDA") #{\A \C \D \E})
